/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* autogen by #_hhb_version_# */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <libgen.h>
#include <unistd.h>
#include "csi_ovx.h"
#include "process.h"

#define MIN(x, y) ((x) < (y) ? (x) : (y))
#define FILE_LENGTH         1028
#define SHAPE_LENGHT        128
#define SHOW_TOP5           #_show_top5_#
#define SAVE_OUTPUT         #_save_output_#
#define DISABLE_NBG         #_disable_nbg_#

#define INPUT_NUM           #_input_num#
void *csinn_(char *params);
void *csinn_nbg(const char *nbg_file_name);
void csinn_run(#_anole_csinn_args# void *td);
uint8_t *csi_nn_input_f32_to_u8(uint32_t idx, float *data, void *td);
int input_size[] = {#_input_size_define#};
int output_size[] = {#_output_size_define#};
const char model_name[] = "#_model_name_define#";

#_preprocess_define_#

static void print_tensor_info(struct csi_tensor *t) {
    printf("\n=== tensor info ===\n");
    printf("shape: ");
    for (int j = 0; j < t->dim_count; j++) {
        printf("%d ", t->dim[j]);
    }
    printf("\n");
    if (t->dtype == CSINN_DTYPE_UINT8) {
        printf("scale: %f\n", t->scale);
        printf("zero point: %d\n", t->zero_point);
    }
    printf("data pointer: %p\n", t->data);
}

/*
 * Post process example
 */
static void postprocess(void *sess, const char *filename_prefix) {
    int output_num, input_num;
    struct csi_tensor input;
    struct csi_tensor output;

    input_num = csi_get_input_number(sess);
    for (int i = 0; i < input_num; i++) {
        memset(&input, 0, sizeof(struct csi_tensor));
        csi_get_input(i, &input, sess);
        print_tensor_info(&input);
        free(input.data);
    }

    output_num = csi_get_output_number(sess);
    for (int i = 0; i < output_num; i++) {
        memset(&output, 0, sizeof(struct csi_tensor));
        csi_get_output(i, &output, sess);
        print_tensor_info(&output);

        if (SHOW_TOP5) {
            csi_ovx_show_top5(i, sess);
        }

        if (SAVE_OUTPUT) {
            char filename[FILE_LENGTH] = {0};
            char shape[SHAPE_LENGHT] = {0};

            shape2string(output.dim, output.dim_count, shape, SHAPE_LENGHT);
            snprintf(filename, FILE_LENGTH, "%s_output%u_%s.txt", filename_prefix, i, shape);

            csi_ovx_save_output(i, filename, sess);
        }

        free(output.data);
    }
}

int main(int argc, char **argv) {
    char **data_path = NULL;
    char *params_path = NULL;
    int input_num = #_input_num#;
    int output_num = #_output_num#;
    int input_group_num = 1;
    int i;

    if (argc < (2 + input_num)) {
        printf("Please set valide args: ./model.elf model.params "
                "[tensor1/image1 ...] [tensor2/image2 ...]\n");
        return -1;
    } else {
        if (argc == 3 && get_file_type(argv[2]) == FILE_TXT) {
            data_path = read_string_from_file(argv[2], &input_group_num);
            input_group_num /= input_num;
        } else {
            data_path = argv + 2;
            input_group_num = (argc - 2) / input_num;
        }
    }
    void *sess;
    params_path = argv[1];

    char nbg_filename[FILE_LENGTH] = {0};
    snprintf(nbg_filename, FILE_LENGTH, "%s.nb", model_name);
    char *suffix = params_path + (strlen(params_path) - 3);
    if (strcmp(suffix, ".nb") == 0) {
        // create binary graph
        sess = csinn_nbg(params_path);
    } else {
        // create general graph
        if (!DISABLE_NBG) {
            const char value[] = "1";
            setenv("VIV_VX_ENABLE_SAVE_NETWORK_BINARY", value, 1);
            setenv("VIV_VX_SAVE_NETWORK_BINARY_PATH", nbg_filename, 1);
        }
        char *params = get_params_from_file(params_path);
        if (params == NULL) {
            return -1;
        }
        sess = csinn_(params);
        free(params);
    }

    struct image_data img;
    float *inputf[input_num];
    uint8_t *input[input_num];
    char filename_prefix[FILE_LENGTH] = {0};
    for (i = 0; i < input_group_num; i++) {
        /* set input */
        for (int j = 0; j < input_num; j++) {
            img = get_input_data(data_path[i * input_num + j], input_size[j]);
            if (get_file_type(data_path[i]) != FILE_TENSOR) {
                preprocess(&img, #_is_rgb#, #_to_bgr#);
            }
            inputf[j] = img.data;
            if (img.shape) {
                free(img.shape);
            }
            input[j] = csi_ovx_input_f32_to_u8(0, inputf[j], sess);
        }

        csinn_run(#_anole_value_pass# sess);

        snprintf(filename_prefix, FILE_LENGTH, "%s", basename(data_path[i * input_num]));
        postprocess(sess, filename_prefix);

        for (int j = 0; j < input_num; j++) {
            free(inputf[j]);
            free(input[j]);
        }
    }

    csi_session_deinit(sess);
    csi_free_session(sess);

    return 0;
}
