# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# pylint: disable=unnecessary-comprehension
"""
Simulate the imported model in x86.
"""
import logging
import tarfile
import tempfile
import os
import yaml

import numpy as np

import tvm
from tvm import runtime
from tvm.contrib import graph_runtime
from tvm.contrib import hhb_runtime

from utils import hhb_register_parse
from utils import print_top5
from utils import add_preprocess_argument
from utils import add_common_argument
from utils import add_simulate_argument
from utils import add_postprocess_argument
from utils import HHBException
from utils import ensure_dir
from model_evaluation import PreprocessParams
from model_evaluation import DatasetLoader
from hhb_models import HHBCodegenX86FloatModel
from hhb_models import HHBCodegenX86QuantModel


# pylint: disable=invalid-name
logger = logging.getLogger("HHB")


@hhb_register_parse
def add_simulate_parser(subparsers):
    """ Include parser for 'simulate' subcommand """

    parser = subparsers.add_parser("simulate", help="Simulate the imported model")
    parser.set_defaults(func=driver_simulate)

    add_simulate_argument(parser)
    add_preprocess_argument(parser)
    add_postprocess_argument(parser)
    add_common_argument(parser)

    parser.add_argument("-v", "--verbose", action="count", default=0, help="Increase verbosity")
    parser.add_argument(
        "-o",
        "--output",
        default="model_simulate",
        help="The directory that holds the result files.",
    )
    parser.add_argument("FILE", help="Directory to the model file")


def driver_simulate(args):
    preprocess_params = PreprocessParams(
        mean=args.data_mean,
        scale=args.data_scale,
        resize_base=args.data_resize,
        pixel_format=args.pixel_format,
    )
    if not os.path.exists(args.FILE) or not os.path.isdir(args.FILE):
        raise HHBException("The directory is not exists: {}".format(args.FILE))
    run_x86(args.FILE, args.simulate_data, preprocess_params, args.postprocess, args.output)


def run_x86(codegen_model_path, input_path, preprocess_params, postprocess, output_dir):
    """Execute the module in x86.

    Parameters
    ----------
    codegen_model_path : str
        Generated by 'codegen' subcommand
    input_path : str
        The data file for input of model
    preprocess_params : PreprocessParams
        The collection of preprocess parameters
    postprocess : str
        The mothod how to deal with output result
    output_dir : str
        save the output result into directory while specify the postprocess as
        "save" or "save_and_top5"
    """
    filenames = os.listdir(codegen_model_path)
    hhb_float = HHBCodegenX86FloatModel()
    hhb_quant = HHBCodegenX86QuantModel()

    is_float = True
    for n in hhb_float.all_included_files:
        if n not in filenames:
            is_float = False
            break

    input_shape_dict = {}
    if is_float:
        with open(os.path.join(codegen_model_path, hhb_float.info_file), "r") as f:
            info_dict = yaml.load(f.read())
            input_shape_dict = {
                k: v for k, v in zip(info_dict["input_name_list"], info_dict["input_shape_list"])
            }
        m = restore_float_model(
            codegen_model_path, hhb_float.graph_name, hhb_float.lib_name, hhb_float.params_name
        )

    else:
        with open(os.path.join(codegen_model_path, hhb_quant.info_file), "r") as f:
            info_dict = yaml.load(f.read())
            input_shape_dict = {
                k: v for k, v in zip(info_dict["input_name_list"], info_dict["input_shape_list"])
            }
        m = restore_quant_model(
            codegen_model_path, hhb_quant.lib_name, info_dict, hhb_quant.params_name
        )

    dl = DatasetLoader(input_path, input_shape_dict, preprocess_params)
    dataset = dl.get_data()
    index = 0
    for data in dataset:
        m.run(**data)
        for i in range(m.get_num_outputs()):
            output = m.get_output(i).asnumpy()
            out = np.reshape(output, [np.prod(output.size)])
            output_prefix = os.path.basename(dl.file_path[index]) + "_output_" + str(i) + ".tensor"
            if postprocess == "top5":
                print_top5(out, str(i))
            elif postprocess == "save":
                output_dir = ensure_dir(output_dir)
                np.savetxt(
                    os.path.join(output_dir, output_prefix), out, delimiter="\n", newline="\n"
                )
            else:
                print_top5(out, str(i))
                output_dir = ensure_dir(output_dir)
                np.savetxt(
                    os.path.join(output_dir, output_prefix), out, delimiter="\n", newline="\n"
                )
        index += 1


def restore_float_model(model_dir, graph_name, lib_name, params_name):
    """Restore the float model from file that generated by codegen subcommand"""
    graph = open(os.path.join(model_dir, graph_name)).read()
    params = bytearray(open(os.path.join(model_dir, params_name), "rb").read())
    lib = runtime.load_module(os.path.join(model_dir, lib_name))

    ctx = tvm.cpu(0)
    module = graph_runtime.create(graph, lib, ctx)
    module.load_params(params)
    return module


def restore_quant_model(model_dir, lib_name, info_dict, params_name):
    """Restore the quant model from file that generated by codegen subcommand"""
    lib = runtime.load_module(os.path.join(model_dir, lib_name))
    ctx = tvm.cpu(0)
    ctx, _, device_type_id = hhb_runtime.get_device_ctx(lib, ctx)
    fcreate = tvm._ffi.get_global_func("tvm.hhb_runtime.create")

    mod = hhb_runtime.HHBModule(fcreate(lib, *device_type_id), info_dict)
    mod.set_params(os.path.join(model_dir, params_name))
    return mod
